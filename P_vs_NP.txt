The P versus NP problem is a major unsolved problem in computer science. It asks whether every problem
whose solution can be quickly verified can also be solved quickly.
It is one of the seven Millennium Prize Problems selected by the Clay Mathematics Institute, each of which
carries a US$1,000,000 prize for the first correct solution.
The informal term quickly, used above, means the existence of an algorithm solving the task that runs in
polynomial time, such that the time to complete the task varies
as a polynomial function on the size of the input to the algorithm (as opposed to, say, exponential time).
The general class of questions for which some algorithm can provide an answer in polynomial time is called "class P"
or just "P". For some questions, there is no known way to find an answer quickly, but if one is provided with
information showing what the answer is, it is possible to verify the answer quickly.
The class of questions for which an answer can be verified in polynomial time is called NP,
which stands for "nondeterministic polynomial time".
An answer to the P versus NP question would determine whether problems that can be verified in polynomial time can
also be solved in polynomial time. If it turned out that P â‰  NP, which is widely believed, it would mean
that there are problems in NP that are harder to compute than to verify: they could not be solved in polynomial time,
but the answer could be verified in polynomial time.
Aside from being an important problem in computational theory, a proof either way would have profound implications
for mathematics, cryptography, algorithm research, artificial intelligence, game theory, multimedia processing,
philosophy, economics and many other fields.
Consider Sudoku, a game where the player is given a partially filled-in grid of numbers and attempts to complete
the grid following certain rules. Given an incomplete Sudoku grid, of any size, is there at least one legal solution?
Any proposed solution is easily verified, and the time to check a solution grows slowly (polynomially) as the grid
gets bigger. However, all known algorithms for finding solutions take, for difficult examples, time that grows
exponentially as the grid gets bigger. So, Sudoku is in NP (quickly checkable) but does not seem to be in P
(quickly solvable). Thousands of other problems seem similar, in that they are fast to check but slow to solve.
Researchers have shown that many of the problems in NP have the extra property that a fast solution to any one of
them could be used to build a quick solution to any other problem in NP, a property called NP-completeness.
Decades of searching have not yielded a fast solution to any of these problems, so most scientists suspect
that none of these problems can be solved quickly. This, however, has never been proven.
